package snake;

import snake.snakeAI.nn.SnakeAIAgent;

import java.awt.Color;
import java.util.LinkedList;

public abstract class SnakeAgent {

    protected Cell cell;
    protected Color color;
    protected LinkedList<Tail> snakeBody;
    protected boolean alive;

    public SnakeAgent(Cell cell, Color color) {
        this.cell = cell;
        if (cell != null) {
            this.cell.setAgent(this);
        }
        this.color = color;
        this.snakeBody = new LinkedList<>();
        this.alive = true;
    }

    protected void moverCauda(Cell pos) {
        if (!snakeBody.isEmpty()) {
            Cell lastTail = snakeBody.removeLast().getCell();
            lastTail.setTail(null);
            snakeBody.add(0, new Tail(pos));
        }
    }

    public void act(Environment environment) {
        Perception perception = buildPerception(environment);
        Action action = decide(perception);
        execute(action, environment);
    }

    public Perception buildPerception(Environment environment) {
        return new Perception(
                environment.getNorthCell(cell),
                environment.getSouthCell(cell),
                environment.getEastCell(cell),
                environment.getWestCell(cell),
                environment.getFoodPosition(cell));

    }

    public boolean isAlive() {
        for (Tail s : snakeBody) {
            if (s.getCell() == this.getCell() || s.getCell().hasWall()) {
                return !this.alive;
            }
        }
        return this.alive;
    }

    protected void execute(Action action, Environment environment) {
        // TODO?
        Cell nextCell = null;

        if (action == Action.NORTH && cell.getLine() != 0)
            nextCell = environment.getNorthCell(cell);
        else if (action == Action.SOUTH && cell.getLine() != environment.getNumLines() - 1)
            nextCell = environment.getSouthCell(cell);
        else if (action == Action.WEST && cell.getColumn() != 0)
            nextCell = environment.getWestCell(cell);
        else if (action == Action.EAST && cell.getColumn() != environment.getNumColumns() - 1)
            nextCell = environment.getEastCell(cell);

        if (nextCell == null || nextCell.hasAgent() || nextCell.hasTail()) {
            alive = false;

            return;
        }

        setCell(nextCell);

    }

    /*
    protected void execute(Action action, Environment environment) {
        Cell nextCell = null;

        if (action == Action.NORTH && cell.getLine() != 0) {
            nextCell = environment.getNorthCell(cell);
        } else if (action == Action.SOUTH && cell.getLine() != environment.getSize() - 1) {
            nextCell = environment.getSouthCell(cell);
        } else if (action == Action.WEST && cell.getColumn() != 0) {
            nextCell = environment.getWestCell(cell);
        } else if (action == Action.EAST && cell.getColumn() != environment.getSize() - 1) {
            nextCell = environment.getEastCell(cell);
        }

        if (nextCell != null && !nextCell.hasWall() && !nextCell.hasAgent() && !nextCell.hasTail()) {
            setCell(nextCell);
        }

    }*/

    protected abstract Action decide(Perception perception);

    public Cell getCell() {
        return cell;
    }

    public void setCell(Cell newCell) {
        if (this.cell != null) {
            this.cell.setAgent(null);
        }
        this.cell = newCell;
        if (newCell != null) {
            newCell.setAgent(this);
        }
    }

    public Color getColor() {
        return color;
    }


}

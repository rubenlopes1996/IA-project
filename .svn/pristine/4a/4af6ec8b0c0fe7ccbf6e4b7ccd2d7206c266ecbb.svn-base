package snake.snakeAI;

import snake.snakeAI.ga.RealVectorIndividual;

public class SnakeIndividual extends RealVectorIndividual<SnakeProblem, SnakeIndividual> {
    private double value;
    private double weight;
    private double[] genomeList;


    public SnakeIndividual(SnakeProblem problem, int size /*TODO?*/) {
        super(problem, size);
        //TODO?
    }

    public SnakeIndividual(SnakeIndividual original) {
        //TODO feito ?
        super(original);
        this.weight = original.weight;
        this.value = original.value;
        this.genomeList = new double[genome.length];
    }

    @Override
    public double computeFitness() {
        //TODO feito??
        value = weight = 0;
        int numEnviroment = problem.getNumEvironmentSimulations();
        int numFoods = problem.getEnvironment().foodeat;

        fitness = numEnviroment*0.8 + numFoods*0.2;

        return fitness;

    }

    public double[] getGenome() {
        //TODO
        for (int i = 0; i < genome.length; i++) {
            //genomeList[i]=genome[i];
            //Pegar no genome e adicionar a genomeList
        }
        return genomeList;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("\nWeight: " + weight + " (limit: " + weight + ")");
        sb.append("\nValue: " + value);
        sb.append("\nfitness: " + fitness);
        sb.append("\nItems: ");
        for (int i = 0; i < genome.length; i++) {
            if (genome[i] == ONE) {
                sb.append(problem.getItem(i));
            }
        }
        return sb.toString();
    }

    /**
     * @param i
     * @return 1 if this object is BETTER than i, -1 if it is WORST than I and
     * 0, otherwise.
     */

    @Override
    public int compareTo(SnakeIndividual i) {
        //TODO feito?
        if (i.getFitness() > this.getFitness()) {
            return -1;
        }else if(i.getFitness() < this.getFitness()) {
            return -1;
        }
        return 0;
    }

    @Override
    public SnakeIndividual clone() {

        return new SnakeIndividual(this);
    }
}

package snake.snakeAdhoc;

import snake.*;

import java.awt.*;


public class SnakeAdhocAgent extends SnakeAgent {

    public SnakeAdhocAgent(Cell cell) {
        super(cell, Color.CYAN);
    }

    public void act(Environment environment) {
        Perception perception = buildPerception(environment);
        Action action = decide(perception);
        execute(action, environment);
    }

    public Cell getCell() {
        return cell;
    }

    public void setCell(Cell cell) {
        this.cell.setAgent(null);
        this.cell = cell;
        this.cell.setAgent(this);
    }

    public Color getColor() {
        return Color.BLACK;
    }

    public Action decide(Perception perception) {
        // todo modify to improve the SnakeAdhocAgent decision process
        Cell w = perception.getW();
        Cell n = perception.getN();
        Cell e = perception.getE();
        Cell s = perception.getS();
        Cell food = perception.getFood();

        Action action = null;

        if (w != null) {
            if (w.hasFood()) {
                w.setFood(null);
                snakeBody.add(0, new Tail(cell));
                return Action.WEST;
            }
        }

        if (n != null) {
            if (n.hasFood()) {
                n.setFood(null);
                snakeBody.add(0, new Tail(cell));
                return Action.NORTH;
            }
        }

        if (e != null) {
            if (e.hasFood()) {
                e.setFood(null);
                snakeBody.add(0, new Tail(cell));
                return Action.EAST;
            }
        }

        if (s != null) {
            if (s.hasFood()) {
                s.setFood(null);
                snakeBody.add(0, new Tail(cell));
                return Action.SOUTH;
            }
        }


        if (w != null && !w.hasWall()) {
            if (!w.hasTail())
                action = foodChase(food, perception);

        }


        if (n != null && !n.hasWall()) {
            if (!n.hasTail())
                action = foodChase(food, perception);
        }


        if (e != null && !e.hasWall()) {
            if (!e.hasTail())
                action = foodChase(food, perception);
        }


        if (s != null && !s.hasWall()) {
            if (!s.hasTail())
                action = foodChase(food, perception);
        }
        moverCauda(this.getCell());
        return action;
    }

    private Action foodChase(Cell food, Perception perception) {
        Cell w = perception.getW();
        Cell n = perception.getN();
        Cell e = perception.getE();
        Cell s = perception.getS();
        Action action = null;

        if (this.getCell().getLine() == food.getLine()) {
            if (this.getCell().getColumn() < food.getColumn()) {
                if (!e.hasTail() && !e.hasAgent() && e != null && !e.hasWall()) {
                    action = Action.EAST;
                } else if (n != null) {
                    action = Action.NORTH;
                } else {
                    action = Action.SOUTH;
                }
            } else if (this.getCell().getColumn() > food.getColumn()) {
                if (!w.hasTail() && !w.hasAgent() && w != null && !w.hasWall()) {
                    action = Action.WEST;
                } else if (s != null) {
                    action = Action.SOUTH;
                } else {
                    action = Action.NORTH;
                }
            }
        }

        if (this.getCell().getLine() == food.getLine()) {
            if (this.getCell().getColumn() > food.getColumn()) {
                if (!w.hasTail() && !w.hasAgent() && w != null && !w.hasWall()) {
                    action = Action.WEST;
                } else if (s != null) {
                    action = Action.SOUTH;
                } else {
                    action = Action.NORTH;
                }
            } else if (this.getCell().getColumn() < food.getColumn()) {
                if (!e.hasTail() && !e.hasAgent() && e != null && !e.hasWall()) {
                    action = Action.EAST;
                } else if (s != null) {
                    action = Action.SOUTH;
                } else {
                    action = Action.NORTH;
                }
            }
        }

        if (this.getCell().getLine() < food.getLine()) {
            if (this.getCell().getColumn() == food.getColumn()) {
                if (!n.hasTail() && !n.hasAgent() && n != null && !n.hasWall()) {
                    action = Action.NORTH;
                } else if (e != null) {
                    action = Action.EAST;
                } else {
                    action = Action.WEST;
                }
            } else if (this.getCell().getColumn() != food.getColumn()) {
                if (!s.hasTail() && !s.hasAgent() && s != null && !s.hasWall()) {
                    action = Action.SOUTH;
                } else if (e != null) {
                    action = Action.EAST;
                } else {
                    action = Action.WEST;
                }
            }
        }

        if (this.getCell().getLine() > food.getLine()) {
            if (this.getCell().getColumn() == food.getColumn()) {
                if (!s.hasTail() && !s.hasAgent() && s != null && !s.hasWall()) {
                    action = Action.SOUTH;
                } else if (e != null) {
                    action = Action.EAST;
                } else {
                    action = Action.WEST;
                }
            } else if (this.getCell().getColumn() != food.getColumn()) {
                if (!n.hasTail() && !n.hasAgent() && n != null && !n.hasWall()) {
                    action = Action.NORTH;
                } else if (e != null) {
                    action = Action.EAST;
                } else {
                    action = Action.WEST;
                }
            }
        }

        if (this.getCell().getColumn() == food.getColumn()) {
            if (this.getCell().getLine() > food.getLine()) {
                if (!n.hasTail() && !n.hasAgent() && n != null && !n.hasWall()) {
                    action = Action.NORTH;
                } else if (e != null) {
                    action = Action.EAST;
                } else {
                    action = Action.WEST;
                }
            } else if (this.getCell().getLine() < food.getLine()) {
                if (!s.hasTail() && !s.hasAgent() && s != null && !s.hasWall()) {
                    action = Action.SOUTH;
                } else if (e != null) {
                    action = Action.EAST;
                } else {
                    action = Action.WEST;
                }
            }
        }

        if (this.getCell().getColumn() == food.getColumn()) {
            if (this.getCell().getLine() < food.getLine()) {
                if (!s.hasTail() && !s.hasAgent() && s != null && !s.hasWall()) {
                    action = Action.SOUTH;
                } else if (e != null) {
                    action = Action.EAST;
                } else {
                    action = Action.WEST;
                }
            } else if (this.getCell().getLine() > food.getLine()) {
                if (!n.hasTail() && !n.hasAgent() && n != null && !n.hasWall()) {
                    action = Action.NORTH;
                } else if (e != null) {
                    action = Action.EAST;
                } else {
                    action = Action.WEST;
                }
            }
        }
        return action;
    }
}


package snake;

import java.awt.Color;
import java.util.LinkedList;

public abstract class SnakeAgent {

    protected Cell cell;
    protected Color color;
    protected LinkedList<Tail> snakeBody;
    protected boolean alive;
    protected int foodEat;


    public SnakeAgent(Cell cell, Color color) {
        this.cell = cell;
        if (cell != null) {
            this.cell.setAgent(this);
        }
        this.color = color;
        this.snakeBody = new LinkedList<>();
        this.alive = true;
        this.foodEat = 0;
    }

    protected void moverCauda(Cell pos) {
        if (!snakeBody.isEmpty()) {
            Cell lastTail = snakeBody.removeLast().getCell();
            lastTail.setTail(null);
            snakeBody.add(0, new Tail(pos));
        }
    }

    public void act(Environment environment) {
        Perception perception = buildPerception(environment);
        Action action = decide(perception);
        execute(action, environment);
    }

    public Perception buildPerception(Environment environment) {
        return new Perception(
                environment.getNorthCell(cell),
                environment.getSouthCell(cell),
                environment.getEastCell(cell),
                environment.getWestCell(cell),
                environment.getFoodPosition(cell));

    }

    public boolean isAlive() {
        return alive;
    }

    protected void execute(Action action, Environment environment) {
        Cell nextCell = null;

        if (action == Action.NORTH && cell.getLine() != 0) {
            nextCell = environment.getNorthCell(cell);
            moverCauda(cell);
        } else if (action == Action.SOUTH && cell.getLine() != environment.getNumLines() - 1) {
            nextCell = environment.getSouthCell(cell);
            moverCauda(cell);
        } else if (action == Action.WEST && cell.getColumn() != 0) {
            nextCell = environment.getWestCell(cell);
            moverCauda(cell);
        } else if (action == Action.EAST && cell.getColumn() != environment.getNumColumns() - 1) {
            nextCell = environment.getEastCell(cell);
            moverCauda(cell);
        }
        if (nextCell != null && nextCell.hasFood() && !nextCell.hasAgent() && !nextCell.hasTail()) {
            foodEat++;
        }
        if (nextCell == null || nextCell.hasAgent() || nextCell.hasTail()) {
            alive = false;

        } else {

            setCell(nextCell);
        }
    }

    protected Action action(Perception perception) {

        Cell w = perception.getW();
        Cell n = perception.getN();
        Cell e = perception.getE();
        Cell s = perception.getS();
        Action action = null;


        if (w != null && !w.hasTail() && !w.hasAgent()) {
            if (w.hasFood()) {
                w.setFood(null);
                snakeBody.add(0, new Tail(cell));
                action = Action.WEST;
            }
        }

        if (n != null && !n.hasTail() && !n.hasAgent()) {
            if (n.hasFood()) {
                n.setFood(null);
                snakeBody.add(0, new Tail(cell));
                action = Action.NORTH;
            }
        }

        if (e != null && !e.hasTail() && !e.hasAgent()) {
            if (e.hasFood()) {
                e.setFood(null);
                snakeBody.add(0, new Tail(cell));
                action = Action.EAST;
            }
        }

        if (s != null && !s.hasTail() && !s.hasAgent()) {
            if (s.hasFood()) {
                s.setFood(null);
                snakeBody.add(0, new Tail(cell));
                action = Action.SOUTH;
            }
        }

        return action;
    }

    public int getFoodEat() {
        return foodEat;
    }

    protected abstract Action decide(Perception perception);

    public Cell getCell() {
        return cell;
    }

    public void setCell(Cell newCell) {
        if (this.cell != null) {
            this.cell.setAgent(null);
        }
        this.cell = newCell;
        if (newCell != null) {
            newCell.setAgent(this);
        }
        if (newCell.hasFood()) {
            this.cell.setFood(null);
        }
    }


    public Color getColor() {
        return color;
    }


}

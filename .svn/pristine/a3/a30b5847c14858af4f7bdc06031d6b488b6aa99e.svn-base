package snake.snakeAI;

import snake.*;
import snake.snakeAI.ga.RealVectorIndividual;
import snake.snakeAI.nn.SnakeAIAgent;

import javax.swing.*;

public class SnakeIndividual extends RealVectorIndividual<SnakeProblem, SnakeIndividual> {
    private int food, movements, bestFood, bestMovements;
    private double bestFitness;

    public SnakeIndividual(SnakeProblem problem, int size /*TODO?*/) {
        super(problem, size);
        //TODO?


    }

    public SnakeIndividual(SnakeIndividual original) {
        //TODO feito ?
        super(original);
        this.movements = original.movements;
        this.food = original.food;
        this.bestMovements = original.bestMovements;
        this.bestFood = original.bestFood;
        this.bestFitness = original.bestFitness;


    }

    @Override
    public double computeFitness() {
        Environment environment = problem.getEnvironment();
        int[] vector;
        food = 0;
        movements = 0;


        for (int i = 0; i < problem.getNumEvironmentSimulations(); i++) {

            environment.initialize(i);
            SnakeAIAgent agent = (SnakeAIAgent) environment.getAgents().get(0);
            agent.setWeights(genome);

            vector = environment.simulateSnakeAi();
            movements += vector[0];
            food += vector[1];
            bestMovements = vector[2];
            bestFood = vector[3];

        }
        fitness = (food * 100 + movements * 0.5);
        food = food / problem.getNumEvironmentSimulations();
        movements = movements / problem.getNumEvironmentSimulations();
        fitness = fitness / problem.getNumEvironmentSimulations();

        bestFitness = (bestFood * 100 + bestMovements * 0.5);

        if (fitness > bestFitness) {
            bestFitness = fitness;
        }
        return fitness;

    }

    public double[] getGenome() {
        return genome;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("\nAverage:");
        sb.append("\n\tFitness: " + fitness);
        sb.append("\n\tMovements: " + (double) movements);
        sb.append("\n\tFood Eaten: " + (double) food);
        sb.append("\nBest snake:");
        sb.append("\n\tFitness: " + bestFitness);
        sb.append("\n\tMovements: " + (double) bestMovements);
        sb.append("\n\tFood Eaten: " + (double) bestFood);


        return sb.toString();
    }


    @Override
    public int compareTo(SnakeIndividual i) {
        if (this.fitness > i.fitness)
            return 1;

        if (this.fitness == i.fitness)
            return 0;

        return -1;
    }

    @Override
    public SnakeIndividual clone() {
        return new SnakeIndividual(this);
    }
}

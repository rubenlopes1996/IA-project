package snake.snakeAI;

import snake.*;
import snake.snakeAI.ga.RealVectorIndividual;
import snake.snakeAI.nn.SnakeAIAgent;

import javax.swing.*;

public class SnakeIndividual extends RealVectorIndividual<SnakeProblem, SnakeIndividual> {
    private int food, movements,bestFood, bestMovements;
    private double bestFitness;

    public SnakeIndividual(SnakeProblem problem, int size /*TODO?*/) {
        super(problem, size);
        //TODO?


    }

    public SnakeIndividual(SnakeIndividual original) {
        //TODO feito ?
        super(original);
        this.movements = original.movements;
        this.food = original.food;
        this.bestFood = original.bestFood;
        this.bestMovements = original.bestMovements;
        this.bestFitness = original.bestFitness;

    }

    @Override
    public double computeFitness() {
        Environment environment = problem.getEnvironment();
        int[] vector = new int[2];
        food = 0;
        movements = 0;
        vector[0] = 0;
        vector[1] = 0;

        for (int i = 0; i < problem.getNumEvironmentSimulations(); i++) {

            environment.initialize(i);
            SnakeAIAgent agent = (SnakeAIAgent) environment.getAgents().get(0);
            agent.setWeights(genome);

            vector = environment.simulateSnakeAi();
            movements += vector[0];
            food += vector[1];

            if(vector[1]>bestFood){
                bestFood = vector[1];
            }
            if(vector[0]>bestMovements){
                bestMovements = vector[0];
            }

            if(fitness>bestFitness){
                bestFitness = fitness;
            }

        }


        return fitness = (food * 100 + movements * 0.5);

    }

    public double[] getGenome() {
        return genome;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("\nAverage:");
        sb.append("\n\tFitness: " + fitness);
        sb.append("\n\tMovements: " + (double) movements/problem.getNumEvironmentSimulations());
        sb.append("\n\tFood Eaten: " + (double )food/problem.getNumEvironmentSimulations());
        /*sb.append("\nBest snake:");
        sb.append("\n\tFitness: " + bestFitness);
        sb.append("\n\tMovements: " + (double) bestMovements/problem.getNumEvironmentSimulations());
        sb.append("\n\tFood Eaten: " + (double )bestFood/problem.getNumEvironmentSimulations());*/



        return sb.toString();
    }

    /**
     * @param i
     * @return 1 if this object is BETTER than i, -1 if it is WORST than I and
     * 0, otherwise.
     */

    @Override
    public int compareTo(SnakeIndividual i) {
        if (this.fitness > i.fitness)
            return 1;

        if (this.fitness == i.fitness)
            return 0;

        return -1;
    }

    @Override
    public SnakeIndividual clone() {
        return new SnakeIndividual(this);
    }
}

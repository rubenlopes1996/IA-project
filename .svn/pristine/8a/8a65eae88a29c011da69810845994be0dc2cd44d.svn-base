package snake.snakeAI.nn;

import snake.*;


import java.awt.Color;
import java.util.Random;

//Tarefa 3
public class SnakeAIAgent extends SnakeAgent {

    final private int inputLayerSize;
    final private int hiddenLayerSize;
    final private int outputLayerSize;

    /**
     * Network inputs array.
     */
    final private int[] inputs;
    /**
     * Hiddden layer weights.
     */
    final private double[][] w1;
    /**
     * Output layer weights.
     */
    final private double[][] w2;
    /**
     * Hidden layer activation values.
     */
    final private double[] hiddenLayerOutput;
    /**
     * Output layer activation values.
     */
    final private int[] output;

    final private int[] inputLayer;

    public SnakeAIAgent(Cell cell, int inputLayerSize, int hiddenLayerSize, int outputLayerSize) {
        super(cell, Color.yellow);
        this.inputLayerSize = inputLayerSize;
        this.hiddenLayerSize = hiddenLayerSize;
        this.outputLayerSize = outputLayerSize;
        inputs = new int[inputLayerSize];
        inputs[inputs.length - 1] = -1; //bias entry
        w1 = new double[inputLayerSize][hiddenLayerSize]; // the bias entry for the hidden layer neurons is already counted in inputLayerSize variable
        w2 = new double[hiddenLayerSize + 1][outputLayerSize]; // + 1 due to the bias entry for the output neurons
        hiddenLayerOutput = new double[hiddenLayerSize + 1];
        hiddenLayerOutput[hiddenLayerSize] = -1; // the bias entry for the output neurons
        output = new int[outputLayerSize];
        inputLayer = new int[inputLayerSize];
    }

    /**
     * Initializes the network's weights
     *
     * @param weights vector of weights comming from the individual.
     */
    public void setWeights(double[] weights) {
        // TODO está feito??
        Random r = new Random(Environment.random.nextLong());
        for (int i = 0; i < weights.length; i++) {
            weights[i] = r.nextDouble() * 2 - 1;
        }

    }

    /**
     * Computes the output of the network for the inputs saved in the class
     * vector "inputs".
     */
    public int forwardPropagation() {
        // TODO está feito?
        double somaPesada = 0;
        int max = output[0];
        int indice = 0;

        for (int i = 0; i < hiddenLayerSize; i++) {
            for (int j = 0; j < inputLayerSize; j++) {
                somaPesada += inputLayer[j] * w1[j][i];
            }

            hiddenLayerOutput[i] = somaPesada;
        }

        for (int i = 0; i < outputLayerSize; i++) {
            somaPesada = 0;
            for (int j = 0; j < hiddenLayerSize; j++) {
                somaPesada += hiddenLayerOutput[j] * w2[j][i];
            }


            for (int k = 1; k < output.length; k++) {
                if (output[k] > max) {
                    max = output[k];
                    indice = k;

                }
            }
            output[i] = (int) somaPesada;
        }

        return indice; //output[indice] dá a posição do maior valor do output
    }


    @Override
    public Action decide(Perception perception) {
        // TODO
        Cell food = perception.getFood();
        Action action = null;
        //Verificar para mesmos valores iguais
        //se bater na parede ou na cauda morre

        //observar os valores dos outputs
        // decidir acção

        inputs[0] = perception.getN() != null && perception.getN().hasFood() ? 1 : 0;
        inputs[1] = perception.getE() != null && perception.getE().hasFood() ? 1 : 0;
        inputs[2] = perception.getS() != null && perception.getS().hasFood() ? 1 : 0;
        inputs[3] = perception.getW() != null && perception.getW().hasFood() ? 1 : 0;

        inputs[4] = perception.getN() != null ? 1 : 0;
        inputs[5] = perception.getE() != null ? 1 : 0;
        inputs[6] = perception.getS() != null ? 1 : 0;
        inputs[7] = perception.getW() != null ? 1 : 0;

        inputs[8] = perception.getN() != null && perception.getN().hasAgent() ? 1 : 0;
        inputs[9] = perception.getE() != null && perception.getE().hasAgent() ? 1 : 0;
        inputs[10] = perception.getS() != null && perception.getS().hasAgent() ? 1 : 0;
        inputs[11] = perception.getW() != null && perception.getW().hasAgent() ? 1 : 0;

        inputs[12] = perception.getN() != null && perception.getN().getLine() - food.getLine() == 0 ? 1 : 0;
        inputs[13] = perception.getE() != null && perception.getE().getColumn() - food.getColumn() == 0 ? 1 : 0;
        inputs[14] = perception.getS() != null && perception.getS().getLine() - food.getLine() == 0 ? 1 : 0;
        inputs[15] = perception.getW() != null && perception.getW().getColumn() - food.getColumn() == 0 ? 1 : 0;


        forwardPropagation();

        int max = output[0];
        for (int i = 1; i < output.length; i++) {
            if (output[i] > max) {
                max = output[i];
            }
        }

        if (max == output[0]) {
            action = Action.NORTH;
        }
        if (max == output[1]) {
            action = Action.EAST;
        }
        if (max == output[2]) {
            action = Action.SOUTH;
        }
        if (max == output[3]) {
            action = Action.WEST;
        }

        return action;
    }
}

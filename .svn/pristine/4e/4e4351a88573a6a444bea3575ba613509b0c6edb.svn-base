package snake;

import snake.snakeAI.SnakeIndividual;
import snake.snakeAI.SnakeProblem;
import snake.snakeAI.nn.SnakeAIAgent;
import snake.snakeAI.nn.SnakeAIAgent2;
import snake.snakeAdhoc.SnakeAdhocAgent;
import snake.snakeRandom.SnakeRandomAgent;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class Environment {

    public static Random random;
    public final Cell[][] grid;
    private final List<SnakeAgent> agents;
    private Food food;
    private int maxIterations;
    private final int option;
    private int numIterations;
    private int numLines;
    private int numColumns;
    private SnakeIndividual bestInRun = null;
    private int bestIterations = 0;
    private int bestFoodEater = 0;
    private final int numInputs;
    private final int numOutputs;
    private final int numHiddenLayers;
    private double bestFitness = 0;
    private int foodSnakeAI;
    private int foodSnakeAI2;


    public Environment(int size, int maxIterations, int numInputs, int numHiddenLayers, int numOutputs, int option) {

        this.maxIterations = maxIterations;
        this.numInputs = numInputs;
        this.numOutputs = numOutputs;
        this.numHiddenLayers = numHiddenLayers;
        this.numIterations = 0;
        this.agents = new ArrayList<>();
        Environment.random = new Random();
        this.option = option;

        this.grid = new Cell[size][size];
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid.length; j++) {
                grid[i][j] = new Cell(i, j);
            }
        }
        this.numColumns = this.numLines = grid.length;
    }

    public void initialize(int seed) {
        random.setSeed(seed);
        resetEnvironment();
        placeAgents();
        placeFood();
    }

    private void placeAgents() {
        Cell cell = getCell(random.nextInt(grid.length), random.nextInt(grid.length));
        Cell cell2 = getCell(random.nextInt(grid.length), random.nextInt(grid.length));
        switch (option) {
            case 0:
                SnakeRandomAgent snakeRandomAgent = new SnakeRandomAgent(getCell(random.nextInt(grid.length), random.nextInt(grid.length)));
                agents.add(snakeRandomAgent);
                break;
            case 1:
                SnakeAdhocAgent snakeAdhocAgent = new SnakeAdhocAgent(getCell(random.nextInt(grid.length), random.nextInt(grid.length)));
                agents.add(snakeAdhocAgent);
                break;
            case 2:
                SnakeAIAgent agent = new SnakeAIAgent(cell, numInputs, numHiddenLayers, numOutputs);
                if (bestInRun != null) {
                    agent.setWeights(bestInRun.getGenome());
                }
                agents.add(agent);
                break;
            case 3:
                snakeAdhocAgent = new SnakeAdhocAgent(getCell(random.nextInt(grid.length), random.nextInt(grid.length)));
                snakeRandomAgent = new SnakeRandomAgent(getCell(random.nextInt(grid.length), random.nextInt(grid.length)));
                //cerificar cell e cell2

                agents.add(snakeAdhocAgent);
                agents.add(snakeRandomAgent);
                break;
            case 4:
                SnakeAIAgent2 agent2 = new SnakeAIAgent2(cell, numInputs, numHiddenLayers, numOutputs);
                if (bestInRun != null) {
                    agent2.setWeights(bestInRun.getGenome());
                }
                agents.add(agent2);
                break;
            case 5:
                SnakeAIAgent2 snakeAIAgent = new SnakeAIAgent2(cell, numInputs, numHiddenLayers, numOutputs);
                SnakeAIAgent2 snakeAIAgent2 = new SnakeAIAgent2(cell2, numInputs, numHiddenLayers, numOutputs);
                if (bestInRun != null) {
                    snakeAIAgent.setWeights(bestInRun.getGenome());
                    snakeAIAgent2.setWeights(bestInRun.getGenome());
                }
                agents.add(snakeAIAgent);
                agents.add(snakeAIAgent2);
                break;
            case 6:
                SnakeAIAgent aIAgent1 = new SnakeAIAgent(cell, 10, numHiddenLayers, numOutputs);
                SnakeAIAgent2 aIAgent2 = new SnakeAIAgent2(cell2, numInputs, numHiddenLayers, numOutputs);
                if (bestInRun != null) {
                    aIAgent1.setWeights(bestInRun.getGenome());
                    aIAgent2.setWeights(bestInRun.getGenome());
                }
                agents.add(aIAgent1);
                agents.add(aIAgent2);
        }
    }

    private void resetEnvironment() {

        for (SnakeAgent a: agents){
            a.getCell().setAgent(null);
            a.clearTails();
        }

        agents.clear();

        if(food != null){
            food.getCell().setFood(null);
            food = null;
        }
    }

    public void placeFood() {
        int line;
        int collumn;

        do {
            line = Environment.random.nextInt(10);
            collumn = Environment.random.nextInt(10);
        } while (getCell(line, collumn).hasAgent() || getCell(line, collumn).hasTail());

        this.food = new Food(getCell(line, collumn));

    }

    public void simulate() {
        for (int i = 0; i < maxIterations; i++) {
            for (SnakeAgent agent : agents) {
                if (agent.isAlive()) {
                    agent.act(this);
                    fireUpdatedEnvironment();
                } else {
                    JOptionPane.showMessageDialog(null, "Snake is dead", "Snake : ", JOptionPane.INFORMATION_MESSAGE);
                    return;

                }
            }
        }

    }

    public int[] simulateSnakeAi() {
        int i = 0;
        for (; i < maxIterations; i++) {
            for (SnakeAgent agent : agents) {
                if (agent.isAlive()) {
                    agent.act(this);

                } else {
                    getStatistics();
                    numIterations = i;

                    double foodEat = agent.getFoodEat();
                    int movements = i;
                    double fitness = foodEat * 1000 + movements * 0.5;

                    if (fitness > bestFitness) {
                        bestIterations = numIterations;
                        bestFoodEater = agent.getFoodEat();
                    }
                   /* foodSnakeAI = this.getAgents().get(0).getFoodEat();
                    foodSnakeAI2 = this.getAgents().get(1).getSnakeBody().size();*/
                    int[] vector = new int[]{i, agent.getFoodEat(), bestIterations, bestFoodEater};
                    return vector;
                }
                fireUpdatedEnvironment();
            }
        }
        return new int[]{0, 0, 0, 0};
    }

    public int getSize() {
        return grid.length;
    }

    public Cell getNorthCell(Cell cell) {
        if (cell.getLine() > 0) {
            return grid[cell.getLine() - 1][cell.getColumn()];
        }
        return null;
    }

    public Cell getSouthCell(Cell cell) {
        if (cell.getLine() < grid.length - 1) {
            return grid[cell.getLine() + 1][cell.getColumn()];
        }
        return null;
    }

    public Cell getEastCell(Cell cell) {
        if (cell.getColumn() < grid[0].length - 1) {
            return grid[cell.getLine()][cell.getColumn() + 1];
        }
        return null;
    }

    public Cell getWestCell(Cell cell) {
        if (cell.getColumn() > 0) {
            return grid[cell.getLine()][cell.getColumn() - 1];
        }
        return null;
    }

    public Cell getFoodPosition(Cell cell) {
        return food.getCell();

    }

    public final Cell getCell(int linha, int coluna) {
        return grid[linha][coluna];
    }

    public Color getCellColor(int linha, int coluna) {
        return grid[linha][coluna].getColor();
    }

    public boolean getFood() {
        for (SnakeAgent snakeAgent : agents) {
            if (snakeAgent.getCell() == food.getCell()) {
                food = null;
                return true;
            }

        }
        return false;
    }

    public void setBestInRun(SnakeIndividual bestInRun) {
        this.bestInRun = bestInRun;
    }

    @Override
    public String toString() {

        if (option == 0) {
            return "Snake Random Agent";
        }
        if (option == 1) {
            return "Snkae AdHoc";
        }
        if (option == 2) {
            return "Snake Ai ";
        }
        if (option == 3) {
            return "Snake AdHoc e Snake Random";
        }
        if (option == 4) {
            return "Snake Ai2";
        }
        if (option == 5) {
            return "Snake Ai Coop";
        }
        if (option == 6) {
            return "Snake Ai vs Snake Ai2";
        }
        return null;
    }

    public void getStatistics() {
        snake.snakeAI.ga.utils.FileOperations.appendToTextFile("statistic_Snake.xls", "\n" + toString() + "\t" + agents.get(0).getFoodEat() + "\t" + numIterations + "\n");
    }

    public int getOption() {
        return option;
    }

    public int getNumIterations() {
        return numIterations;
    }

    public int getNumInputs() {
        return numInputs;
    }

    public int getNumOutputs() {
        return numOutputs;
    }

    public int getNumHiddenLayers() {
        return numHiddenLayers;
    }

    public int getNumLines() {
        return numLines;
    }

    public int getNumColumns() {
        return numColumns;
    }

    public int getMaxIterations() {
        return maxIterations;
    }


    public List<SnakeAgent> getAgents() {
        return agents;
    }

    //listeners
    private final ArrayList<EnvironmentListener> listeners = new ArrayList<>();

    public synchronized void addEnvironmentListener(EnvironmentListener l) {
        if (!listeners.contains(l)) {
            listeners.add(l);
        }
    }

    public synchronized void removeEnvironmentListener(EnvironmentListener l) {
        listeners.remove(l);
    }

    public void fireUpdatedEnvironment() {
        for (EnvironmentListener listener : listeners) {
            listener.environmentUpdated();
        }
    }


}
